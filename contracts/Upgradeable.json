{
  "contractName": "Upgradeable",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gateKeeper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "originalTarget",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "TargetChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_CONTRACT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateKeeper",
      "outputs": [
        {
          "internalType": "contract GateKeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gateKeeper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"TargetChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateKeeper\",\"outputs\":[{\"internalType\":\"contract GateKeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Base contract that all upgradeable contracts should use Contracts implementing this interface are all called using delegatecall from a dispatcher. As a result, _dest variables are shared with the dispatcher contract, which allows the called contract to update these at will. _dest is the address of the contract currently implementing all the functionality of the composite contract. Contracts should update this by calling the internal function `replace`, which updates _dest. When upgrading a contract, restrictions on permissible changes to the set of storage variables must be observed. New variables may be added, but existing ones may not be deleted or replaced. Changing variable names is acceptable. Structs in arrays may not be modified, but structs in maps can be, following the same rules described above.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/_library/utility/upgrading/Upgradeable.sol\":\"Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/_library/authentication/GateKeeper.sol\":{\"keccak256\":\"0x7b1a8912b0bf2f6ab4a2e025c2a08d79acd31b5677da1d5c512a1411e4daa964\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e4b6525a9fd4ec26e988079f894ef57b07bdc96538ece92833faccbf5ed301e8\",\"dweb:/ipfs/QmXtwZWG52WaQJ9E5yukTqyW5YdpNy1xwWU1CdxAnZqAjr\"]},\"project:/contracts/_library/authentication/Secured.sol\":{\"keccak256\":\"0x76363f1bd95a33edcd7cee1beff05b5a97fe20d705abe29cc0dce335d722d1b6\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://98ef87fac29d5f4da8d8f9089d5848c680636611f543ebce69823d3fe7219bb5\",\"dweb:/ipfs/QmT3X3RW2riWU4KfAEGKKucW5k4bn3nwyCzMfmEwHL6bEJ\"]},\"project:/contracts/_library/authentication/interfaces/IRoleRegistry.sol\":{\"keccak256\":\"0xc0e91d25211903b0782943a20477e2bdc0b81444ae69b378b67dc033eb75ceff\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e020cb3e46c1e0616b6b44bf7de144cefc951e096d1a7162134c2051406d58ac\",\"dweb:/ipfs/QmVC6x42uZVdoXwqxdcBfS2aqTjAQJxQ3PJMgobEAd43XZ\"]},\"project:/contracts/_library/utility/conversions/Converter.sol\":{\"keccak256\":\"0x2c64ab5905db2e804151d86c969c9c4a7b55afec1b8ea29dbf535efb8ee95b2f\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://921eee343945d2723a4e55432b24e33c6dcb05828bb90608d4b711c9c7b536f2\",\"dweb:/ipfs/QmbAuaLFDWfUH1brqFPbFrL6DPfAswhxsuRBJarVTu2ZAG\"]},\"project:/contracts/_library/utility/upgrading/Upgradeable.sol\":{\"keccak256\":\"0x3ec7cef304ffd53f47c5ff600974b75c8c934131fe17bdf070bd9d05d53093ec\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e30b73ea6713672ff102ffd808fadcc2a851ae01e38954bc0763c79929418c76\",\"dweb:/ipfs/Qmd3CzBFWh5ivJuuaE2x2hpxrgXX2PF5ajhhXAYQjdt2gN\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161016e38038061016e83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b60de806100906000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806317f821391460415780632ac8bb1514606d57806345d61ded146096575b600080fd5b605a6f155411d490511157d0d3d395149050d560821b81565b6040519081526020015b60405180910390f35b600154607f906001600160a01b031681565b6040516001600160a01b0390911681526020016064565b600054607f906001600160a01b03168156fea2646970667358221220090e466b7054732e427cbeb36fd5630bca3e4652d12555994c56b1a933897ff364736f6c63430008030033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b5060043610603c5760003560e01c806317f821391460415780632ac8bb1514606d57806345d61ded146096575b600080fd5b605a6f155411d490511157d0d3d395149050d560821b81565b6040519081526020015b60405180910390f35b600154607f906001600160a01b031681565b6040516001600160a01b0390911681526020016064565b600054607f906001600160a01b03168156fea2646970667358221220090e466b7054732e427cbeb36fd5630bca3e4652d12555994c56b1a933897ff364736f6c63430008030033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:326:164",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:164",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "95:229:164",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "141:26:164",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "150:6:164"
                            },
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "158:6:164"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "143:6:164"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "143:22:164"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "143:22:164"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "116:7:164"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "125:9:164"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "112:3:164"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "112:23:164"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "137:2:164",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "108:3:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "108:32:164"
                  },
                  "nodeType": "YulIf",
                  "src": "105:2:164"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "176:29:164",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "195:9:164"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "189:5:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "189:16:164"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "180:5:164",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "268:26:164",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "277:6:164"
                            },
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "285:6:164"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "270:6:164"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "270:22:164"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "270:22:164"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "227:5:164"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "238:5:164"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "253:3:164",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "258:1:164",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "249:3:164"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "249:11:164"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "262:1:164",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "245:3:164"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "245:19:164"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "234:3:164"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "234:31:164"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "224:2:164"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "224:42:164"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "217:6:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "217:50:164"
                  },
                  "nodeType": "YulIf",
                  "src": "214:2:164"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "303:15:164",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "313:5:164"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "303:6:164"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "61:9:164",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "72:7:164",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "84:6:164",
                "type": ""
              }
            ],
            "src": "14:310:164"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n}",
      "id": 164,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:628:164",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:164",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "115:102:164",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "125:26:164",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "137:9:164"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "148:2:164",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "133:3:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "133:18:164"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "125:4:164"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "167:9:164"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "182:6:164"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "198:3:164",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "203:1:164",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "194:3:164"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "194:11:164"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "207:1:164",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "190:3:164"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "190:19:164"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "178:3:164"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "178:32:164"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "160:6:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "160:51:164"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "160:51:164"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "84:9:164",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "95:6:164",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "106:4:164",
                "type": ""
              }
            ],
            "src": "14:203:164"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "323:76:164",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "333:26:164",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "345:9:164"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "356:2:164",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "341:3:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "341:18:164"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "333:4:164"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "375:9:164"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "386:6:164"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "368:6:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "368:25:164"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "368:25:164"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "292:9:164",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "303:6:164",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "314:4:164",
                "type": ""
              }
            ],
            "src": "222:177:164"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "524:102:164",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "534:26:164",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "546:9:164"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "557:2:164",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "542:3:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "542:18:164"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "534:4:164"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "576:9:164"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "591:6:164"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "607:3:164",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "612:1:164",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "603:3:164"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "603:11:164"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "616:1:164",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "599:3:164"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "599:19:164"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "587:3:164"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "587:32:164"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "569:6:164"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "569:51:164"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "569:51:164"
                }
              ]
            },
            "name": "abi_encode_tuple_t_contract$_GateKeeper_$2038__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "493:9:164",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "504:6:164",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "515:4:164",
                "type": ""
              }
            ],
            "src": "404:222:164"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_GateKeeper_$2038__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
      "id": 164,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "1252:457:56:-:0;;;1447:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:10:20;:36;;-1:-1:-1;;;;;;1456:36:20;-1:-1:-1;;;;;1456:36:20;;;;;;;;;;1252:457:56;;14:310:164;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:164;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:164:o;:::-;1252:457:56;;;;;;",
  "deployedSourceMap": "1252:457:56:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1288:61;;-1:-1:-1;;;1288:61:56;;;;;368:25:164;;;356:2;341:18;1288:61:56;;;;;;;;1353:22;;;;;-1:-1:-1;;;;;1353:22:56;;;;;;-1:-1:-1;;;;;178:32:164;;;160:51;;148:2;133:18;1353:22:56;115:102:164;502:28:20;;;;;-1:-1:-1;;;;;502:28:20;;",
  "source": "// SPDX-License-Identifier: UNLICENSED\n/**\n * Copyright (C) SettleMint NV - All Rights Reserved\n *\n * Use of this file is strictly prohibited without an active license agreement.\n * Distribution of this file, via any medium, is strictly prohibited.\n *\n * For license inquiries, contact hello@settlemint.com\n */\n\npragma solidity ^0.8.0;\n\nimport '../../authentication/Secured.sol';\n\n/**\n * Base contract that all upgradeable contracts should use\n *\n * Contracts implementing this interface are all called using delegatecall from\n * a dispatcher. As a result, _dest variables are shared with the\n * dispatcher contract, which allows the called contract to update these at will.\n *\n * _dest is the address of the contract currently implementing all the\n * functionality of the composite contract. Contracts should update this by\n * calling the internal function `replace`, which updates _dest.\n *\n * When upgrading a contract, restrictions on permissible changes to the set of\n * storage variables must be observed. New variables may be added, but existing\n * ones may not be deleted or replaced. Changing variable names is acceptable.\n * Structs in arrays may not be modified, but structs in maps can be, following\n * the same rules described above.\n */\n\ncontract Upgradeable is Secured {\n  bytes32 public constant UPGRADE_CONTRACT = 'UPGRADE_CONTRACT';\n  address public _target;\n\n  event TargetChanged(address originalTarget, address newTarget);\n\n  constructor(address gateKeeper) Secured(gateKeeper) {}\n\n  /**\n   * Performs a handover to a new implementing contract.\n   */\n  function replace(address target) internal auth(UPGRADE_CONTRACT) {\n    emit TargetChanged(_target, target);\n    _target = target;\n  }\n}\n",
  "sourcePath": "/home/coder/project/contracts/_library/utility/upgrading/Upgradeable.sol",
  "ast": {
    "absolutePath": "project:/contracts/_library/utility/upgrading/Upgradeable.sol",
    "exportedSymbols": {
      "Converter": [
        9752
      ],
      "GateKeeper": [
        2038
      ],
      "IRoleRegistry": [
        2510
      ],
      "Secured": [
        2474
      ],
      "Upgradeable": [
        9936
      ]
    },
    "id": 9937,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 9892,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "312:23:56"
      },
      {
        "absolutePath": "project:/contracts/_library/authentication/Secured.sol",
        "file": "../../authentication/Secured.sol",
        "id": 9893,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 9937,
        "sourceUnit": 2475,
        "src": "337:42:56",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 9895,
              "name": "Secured",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2474,
              "src": "1276:7:56"
            },
            "id": 9896,
            "nodeType": "InheritanceSpecifier",
            "src": "1276:7:56"
          }
        ],
        "contractDependencies": [
          2474,
          9752
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 9894,
          "nodeType": "StructuredDocumentation",
          "src": "381:869:56",
          "text": " Base contract that all upgradeable contracts should use\n Contracts implementing this interface are all called using delegatecall from\n a dispatcher. As a result, _dest variables are shared with the\n dispatcher contract, which allows the called contract to update these at will.\n _dest is the address of the contract currently implementing all the\n functionality of the composite contract. Contracts should update this by\n calling the internal function `replace`, which updates _dest.\n When upgrading a contract, restrictions on permissible changes to the set of\n storage variables must be observed. New variables may be added, but existing\n ones may not be deleted or replaced. Changing variable names is acceptable.\n Structs in arrays may not be modified, but structs in maps can be, following\n the same rules described above."
        },
        "fullyImplemented": true,
        "id": 9936,
        "linearizedBaseContracts": [
          9936,
          2474,
          9752
        ],
        "name": "Upgradeable",
        "nameLocation": "1261:11:56",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "functionSelector": "17f82139",
            "id": 9899,
            "mutability": "constant",
            "name": "UPGRADE_CONTRACT",
            "nameLocation": "1312:16:56",
            "nodeType": "VariableDeclaration",
            "scope": 9936,
            "src": "1288:61:56",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 9897,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1288:7:56",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "555047524144455f434f4e5452414354",
              "id": 9898,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1331:18:56",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_aa137d80574c98e1e686020638a2a518494c1f33b92a3bd9731d019bfeef6de8",
                "typeString": "literal_string \"UPGRADE_CONTRACT\""
              },
              "value": "UPGRADE_CONTRACT"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2ac8bb15",
            "id": 9901,
            "mutability": "mutable",
            "name": "_target",
            "nameLocation": "1368:7:56",
            "nodeType": "VariableDeclaration",
            "scope": 9936,
            "src": "1353:22:56",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 9900,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1353:7:56",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 9907,
            "name": "TargetChanged",
            "nameLocation": "1386:13:56",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 9906,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9903,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "originalTarget",
                  "nameLocation": "1408:14:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 9907,
                  "src": "1400:22:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9902,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1400:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9905,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newTarget",
                  "nameLocation": "1432:9:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 9907,
                  "src": "1424:17:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9904,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1424:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1399:43:56"
            },
            "src": "1380:63:56"
          },
          {
            "body": {
              "id": 9915,
              "nodeType": "Block",
              "src": "1499:2:56",
              "statements": []
            },
            "id": 9916,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 9912,
                    "name": "gateKeeper",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 9909,
                    "src": "1487:10:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 9913,
                "modifierName": {
                  "id": 9911,
                  "name": "Secured",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2474,
                  "src": "1479:7:56"
                },
                "nodeType": "ModifierInvocation",
                "src": "1479:19:56"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9910,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9909,
                  "mutability": "mutable",
                  "name": "gateKeeper",
                  "nameLocation": "1467:10:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 9916,
                  "src": "1459:18:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9908,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1459:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1458:20:56"
            },
            "returnParameters": {
              "id": 9914,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1499:0:56"
            },
            "scope": 9936,
            "src": "1447:54:56",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 9934,
              "nodeType": "Block",
              "src": "1639:68:56",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 9926,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9901,
                        "src": "1664:7:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 9927,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9919,
                        "src": "1673:6:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 9925,
                      "name": "TargetChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9907,
                      "src": "1650:13:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 9928,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1650:30:56",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9929,
                  "nodeType": "EmitStatement",
                  "src": "1645:35:56"
                },
                {
                  "expression": {
                    "id": 9932,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 9930,
                      "name": "_target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9901,
                      "src": "1686:7:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 9931,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9919,
                      "src": "1696:6:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1686:16:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 9933,
                  "nodeType": "ExpressionStatement",
                  "src": "1686:16:56"
                }
              ]
            },
            "documentation": {
              "id": 9917,
              "nodeType": "StructuredDocumentation",
              "src": "1505:66:56",
              "text": " Performs a handover to a new implementing contract."
            },
            "id": 9935,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 9922,
                    "name": "UPGRADE_CONTRACT",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 9899,
                    "src": "1621:16:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 9923,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 9921,
                  "name": "auth",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2321,
                  "src": "1616:4:56"
                },
                "nodeType": "ModifierInvocation",
                "src": "1616:22:56"
              }
            ],
            "name": "replace",
            "nameLocation": "1583:7:56",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9920,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9919,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "1599:6:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 9935,
                  "src": "1591:14:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9918,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1591:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1590:16:56"
            },
            "returnParameters": {
              "id": 9924,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1639:0:56"
            },
            "scope": 9936,
            "src": "1574:133:56",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 9937,
        "src": "1252:457:56"
      }
    ],
    "src": "312:1398:56"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/_library/utility/upgrading/Upgradeable.sol",
    "exportedSymbols": {
      "Converter": [
        9752
      ],
      "GateKeeper": [
        2038
      ],
      "IRoleRegistry": [
        2510
      ],
      "Secured": [
        2474
      ],
      "Upgradeable": [
        9936
      ]
    },
    "id": 9937,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 9892,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "312:23:56"
      },
      {
        "absolutePath": "project:/contracts/_library/authentication/Secured.sol",
        "file": "../../authentication/Secured.sol",
        "id": 9893,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 9937,
        "sourceUnit": 2475,
        "src": "337:42:56",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 9895,
              "name": "Secured",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2474,
              "src": "1276:7:56"
            },
            "id": 9896,
            "nodeType": "InheritanceSpecifier",
            "src": "1276:7:56"
          }
        ],
        "contractDependencies": [
          2474,
          9752
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 9894,
          "nodeType": "StructuredDocumentation",
          "src": "381:869:56",
          "text": " Base contract that all upgradeable contracts should use\n Contracts implementing this interface are all called using delegatecall from\n a dispatcher. As a result, _dest variables are shared with the\n dispatcher contract, which allows the called contract to update these at will.\n _dest is the address of the contract currently implementing all the\n functionality of the composite contract. Contracts should update this by\n calling the internal function `replace`, which updates _dest.\n When upgrading a contract, restrictions on permissible changes to the set of\n storage variables must be observed. New variables may be added, but existing\n ones may not be deleted or replaced. Changing variable names is acceptable.\n Structs in arrays may not be modified, but structs in maps can be, following\n the same rules described above."
        },
        "fullyImplemented": true,
        "id": 9936,
        "linearizedBaseContracts": [
          9936,
          2474,
          9752
        ],
        "name": "Upgradeable",
        "nameLocation": "1261:11:56",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "functionSelector": "17f82139",
            "id": 9899,
            "mutability": "constant",
            "name": "UPGRADE_CONTRACT",
            "nameLocation": "1312:16:56",
            "nodeType": "VariableDeclaration",
            "scope": 9936,
            "src": "1288:61:56",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 9897,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1288:7:56",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "555047524144455f434f4e5452414354",
              "id": 9898,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1331:18:56",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_aa137d80574c98e1e686020638a2a518494c1f33b92a3bd9731d019bfeef6de8",
                "typeString": "literal_string \"UPGRADE_CONTRACT\""
              },
              "value": "UPGRADE_CONTRACT"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2ac8bb15",
            "id": 9901,
            "mutability": "mutable",
            "name": "_target",
            "nameLocation": "1368:7:56",
            "nodeType": "VariableDeclaration",
            "scope": 9936,
            "src": "1353:22:56",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 9900,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1353:7:56",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 9907,
            "name": "TargetChanged",
            "nameLocation": "1386:13:56",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 9906,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9903,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "originalTarget",
                  "nameLocation": "1408:14:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 9907,
                  "src": "1400:22:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9902,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1400:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9905,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newTarget",
                  "nameLocation": "1432:9:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 9907,
                  "src": "1424:17:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9904,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1424:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1399:43:56"
            },
            "src": "1380:63:56"
          },
          {
            "body": {
              "id": 9915,
              "nodeType": "Block",
              "src": "1499:2:56",
              "statements": []
            },
            "id": 9916,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 9912,
                    "name": "gateKeeper",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 9909,
                    "src": "1487:10:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 9913,
                "modifierName": {
                  "id": 9911,
                  "name": "Secured",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2474,
                  "src": "1479:7:56"
                },
                "nodeType": "ModifierInvocation",
                "src": "1479:19:56"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9910,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9909,
                  "mutability": "mutable",
                  "name": "gateKeeper",
                  "nameLocation": "1467:10:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 9916,
                  "src": "1459:18:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9908,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1459:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1458:20:56"
            },
            "returnParameters": {
              "id": 9914,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1499:0:56"
            },
            "scope": 9936,
            "src": "1447:54:56",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 9934,
              "nodeType": "Block",
              "src": "1639:68:56",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 9926,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9901,
                        "src": "1664:7:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 9927,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9919,
                        "src": "1673:6:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 9925,
                      "name": "TargetChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9907,
                      "src": "1650:13:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 9928,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1650:30:56",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9929,
                  "nodeType": "EmitStatement",
                  "src": "1645:35:56"
                },
                {
                  "expression": {
                    "id": 9932,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 9930,
                      "name": "_target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9901,
                      "src": "1686:7:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 9931,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9919,
                      "src": "1696:6:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1686:16:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 9933,
                  "nodeType": "ExpressionStatement",
                  "src": "1686:16:56"
                }
              ]
            },
            "documentation": {
              "id": 9917,
              "nodeType": "StructuredDocumentation",
              "src": "1505:66:56",
              "text": " Performs a handover to a new implementing contract."
            },
            "id": 9935,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 9922,
                    "name": "UPGRADE_CONTRACT",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 9899,
                    "src": "1621:16:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 9923,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 9921,
                  "name": "auth",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2321,
                  "src": "1616:4:56"
                },
                "nodeType": "ModifierInvocation",
                "src": "1616:22:56"
              }
            ],
            "name": "replace",
            "nameLocation": "1583:7:56",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9920,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9919,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "1599:6:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 9935,
                  "src": "1591:14:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9918,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1591:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1590:16:56"
            },
            "returnParameters": {
              "id": 9924,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1639:0:56"
            },
            "scope": 9936,
            "src": "1574:133:56",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 9937,
        "src": "1252:457:56"
      }
    ],
    "src": "312:1398:56"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.3+commit.8d00100c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-09-21T08:20:58.479Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Base contract that all upgradeable contracts should use Contracts implementing this interface are all called using delegatecall from a dispatcher. As a result, _dest variables are shared with the dispatcher contract, which allows the called contract to update these at will. _dest is the address of the contract currently implementing all the functionality of the composite contract. Contracts should update this by calling the internal function `replace`, which updates _dest. When upgrading a contract, restrictions on permissible changes to the set of storage variables must be observed. New variables may be added, but existing ones may not be deleted or replaced. Changing variable names is acceptable. Structs in arrays may not be modified, but structs in maps can be, following the same rules described above.",
    "version": 1
  }
}